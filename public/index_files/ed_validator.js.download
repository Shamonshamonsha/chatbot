
function Validator(frmname)
{
	
  this.formobj=document.forms[frmname];
	if(!this.formobj)
	{
	  alert("Error: couldnot get Form object "+frmname);
		return;
	}
	if(this.formobj.onsubmit)
	{
	 this.formobj.old_onsubmit = this.formobj.onsubmit;
	 this.formobj.onsubmit=null;
	}
	else
	{
	 this.formobj.old_onsubmit = null;
	}
	this.formobj._sfm_form_name=frmname;
	this.formobj.onsubmit=form_submit_handler;
	this.addValidation = add_validation;
	this.setAddnlValidationFunction=set_addnl_vfunction;
	this.clearAllValidations = clear_all_validations;
    this.disable_validations = false;//new
    document.error_disp_handler = new sfm_ErrorDisplayHandler();
    this.EnableOnPageErrorDisplay=validator_enable_OPED;
	this.EnableOnPageErrorDisplaySingleBox=validator_enable_OPED_SB;
    this.show_errors_together=true;
    this.EnableMsgsTogether=sfm_enable_show_msgs_together;
    document.set_focus_onerror=true;
    this.EnableFocusOnError=sfm_validator_enable_focus;

}

function sfm_validator_enable_focus(enable)
{
    document.set_focus_onerror = enable;
}

function set_addnl_vfunction(functionname)
{
  this.formobj.addnlvalidation = functionname;
}

function sfm_set_focus(objInput)
{
   /* if(document.set_focus_onerror)
    {
        objInput.focus();
    }*/
}

function sfm_enable_show_msgs_together()
{
    this.show_errors_together=true;
    this.formobj.show_errors_together=true;
}
function clear_all_validations()
{
	for(var itr=0;itr < this.formobj.elements.length;itr++)
	{
		this.formobj.elements[itr].validationset = null;
	}
}

function form_submit_handler()
{
   var bRet = true;
    document.error_disp_handler.clear_msgs();
	for(var itr=0;itr < this.elements.length;itr++)
	{
		if(this.elements[itr].validationset &&
	   !this.elements[itr].validationset.validate())
		{
		  bRet = false;
		}
        if(!bRet && !this.show_errors_together)
        {
          break;

        }
	}

	if(this.addnlvalidation)
	{
	  str =" var ret = "+this.addnlvalidation+"()";
	  eval(str);

     if(!ret) 
     {
       bRet=false; 
     }

	}

   if(!bRet)
    {
      document.error_disp_handler.FinalShowMsg();
      return false;
    }
	return true;
}

function add_validation(itemname,descriptor,errstr)
{
	var condition = null;
	if(arguments.length > 3)
	{
	 condition = arguments[3]; 
	}
  if(!this.formobj)
	{
		alert("Error: The form object is not set properly");
		return;
	}//if
	var itemobj = this.formobj[itemname];
	if(itemobj!=null) {
	    if(itemobj.length && isNaN(itemobj.selectedIndex) )
	    //for radio button; don't do for 'select' item
		{
			itemobj = itemobj[0];
		}	
	  if(!itemobj)
		{
			alert("Error: Couldnot get the input object named: "+itemname);
			return;
		}
		if(!itemobj.validationset)
		{
			itemobj.validationset = new ValidationSet(itemobj,this.show_errors_together);
		}
		itemobj.validationset.add(descriptor,errstr,condition);
	    itemobj.validatorobj=this;
	}
}
function validator_enable_OPED()
{
    document.error_disp_handler.EnableOnPageDisplay(false);
}

function validator_enable_OPED_SB()
{
	document.error_disp_handler.EnableOnPageDisplay(true);
}
function sfm_ErrorDisplayHandler()
{
  this.msgdisplay = new AlertMsgDisplayer();
  this.EnableOnPageDisplay= edh_EnableOnPageDisplay;
  this.ShowMsg=edh_ShowMsg;
  this.FinalShowMsg=edh_FinalShowMsg;
  this.all_msgs=new Array();
  this.clear_msgs=edh_clear_msgs;
}
function edh_clear_msgs()
{
    this.msgdisplay.clearmsg(this.all_msgs);
    this.all_msgs = new Array();
}
function edh_FinalShowMsg()
{
    this.msgdisplay.showmsg(this.all_msgs);
}
function edh_EnableOnPageDisplay(single_box)
{
	if(true == single_box)
	{
		this.msgdisplay = new SingleBoxErrorDisplay();
	}
	else
	{
		this.msgdisplay = new DivMsgDisplayer();		
	}
}
function edh_ShowMsg(msg,input_element)
{
	
   var objmsg = new Array();
   objmsg["input_element"] = input_element;   
   objmsg["msg"] =  msg;   
   this.all_msgs.push(objmsg);
}
function AlertMsgDisplayer()
{
  this.showmsg = alert_showmsg;
  this.clearmsg=alert_clearmsg;
}
function alert_clearmsg(msgs)
{

}
function alert_showmsg(msgs)
{
    var whole_msg="";
    var first_elmnt=null;
    for(var m=0;m < msgs.length;m++)
    {
        if(null == first_elmnt)
        {
            first_elmnt = msgs[m]["input_element"];
        }
        whole_msg += msgs[m]["msg"] + "\n";
    }
	
    alert(whole_msg);

    if(null != first_elmnt)
    {
        sfm_set_focus(first_elmnt);
    }
}
function sfm_show_error_msg(msg,input_elmt)
{
    document.error_disp_handler.ShowMsg(msg,input_elmt);
}
function SingleBoxErrorDisplay()
{
 this.showmsg=sb_div_showmsg;
 this.clearmsg=sb_div_clearmsg;
}

function sb_div_clearmsg(msgs)
{
	var divname = form_error_div_name(msgs);
	show_div_msg(divname,"");
}

function sb_div_showmsg(msgs)
{
	var whole_msg="<ul>\n";
	var whole_msg_alert="";
	for(var m=0;m < msgs.length;m++)
    {
        whole_msg += "<li>" + msgs[m]["msg"] + "</li>\n";
        whole_msg_alert= whole_msg_alert+"\n"+">>>"+msgs[m]["msg"];
    }
	whole_msg += "</ul>";
	var divname = form_error_div_name(msgs);
	show_div_msg_alert(divname,whole_msg,whole_msg_alert);
}
function form_error_div_name(msgs)
{
	var input_element= null;

	for(var m in msgs)
	{
	 input_element = msgs[m]["input_element"];
	 if(input_element){break;}
	}

	var divname ="";
	if(input_element)
	{
	 divname = input_element.form._sfm_form_name + "_errorloc";
	}

	return divname;
}
function DivMsgDisplayer()
{
 this.showmsg=div_showmsg;
 this.clearmsg=div_clearmsg;
}
function div_clearmsg(msgs)
{
    for(var m in msgs)
    {
        var divname = element_div_name(msgs[m]["input_element"]);
        show_div_msg(divname,"");
    }
}
function element_div_name(input_element)
{
  var divname = input_element.form._sfm_form_name + "_" + 
                   input_element.name + "_errorloc";

  divname = divname.replace(/[\[\]]/gi,"");

  return divname;
}
function div_showmsg(msgs)
{
	var whole_msg;
    var first_elmnt=null;
    for(var m in msgs)
    {
        if(null == first_elmnt)
        {
            first_elmnt = msgs[m]["input_element"];
        }
        var divname = element_div_name(msgs[m]["input_element"]);
        show_div_msg(divname,msgs[m]["msg"]);
    }
    if(null != first_elmnt)
    {
        sfm_set_focus(first_elmnt);
    }
}
function show_div_msg(divname,msgstring)
{
	if(divname.length<=0) return false;

	if(document.layers)
	{
		divlayer = document.layers[divname];
        if(!divlayer){return;}
		divlayer.document.open();
		divlayer.document.write(msgstring);
		divlayer.document.close();
	}
	else
	if(document.all)
	{
		divlayer = document.all[divname];
        if(!divlayer){return;}
		divlayer.innerHTML=msgstring;
	}
	else
	if(document.getElementById)
	{
		divlayer = document.getElementById(divname);
        if(!divlayer){return;}
		divlayer.innerHTML =msgstring;
	}
	divlayer.style.visibility="visible";	
}



// Added To Alert Error Msgs

function show_div_msg_alert(divname,msgstring,alertString)
{
	if(divname.length<=0) return false;

	if(document.layers)
	{
		divlayer = document.layers[divname];
        if(!divlayer){return;}
		divlayer.document.open();
		divlayer.document.write(msgstring);
		divlayer.document.close();
	}
	else
	if(document.all)
	{
		divlayer = document.all[divname];
        if(!divlayer){return;}
		divlayer.innerHTML=msgstring;
	}
	else
	if(document.getElementById)
	{
		divlayer = document.getElementById(divname);
        if(!divlayer){return;}
        alert("Please Check The Following \n"+alertString);
		divlayer.innerHTML =msgstring;
	}
	divlayer.style.visibility="visible";	
}

function ValidationDesc(inputitem,desc,error,condition)
{
	
  this.desc=desc;
	this.error=error;
	this.itemobj = inputitem;
	this.condition = condition;
	this.validate=vdesc_validate;
}
function vdesc_validate()
{
	if(this.condition != null )
	{
		if(!eval(this.condition))
		{
			return true;
		}
	}
	if(!validateInput(this.desc,this.itemobj,this.error))
	{
		this.itemobj.validatorobj.disable_validations=true;

		sfm_set_focus(this.itemobj);
     	return false;
	}
	return true;
}
function ValidationSet(inputitem,msgs_together)
{
    this.vSet=new Array();
	this.add= add_validationdesc;
	this.validate= vset_validate;
	this.itemobj = inputitem;
    this.msgs_together = msgs_together;
}
function add_validationdesc(desc,error,condition)
{
  this.vSet[this.vSet.length]= 
  new ValidationDesc(this.itemobj,desc,error,condition);
}
function vset_validate()
{
    var bRet = true;
    for(var itr=0;itr<this.vSet.length;itr++)
    {
        bRet = bRet && this.vSet[itr].validate();
        if(!bRet && !this.msgs_together)
        {
            break;
        }
    }
    return bRet;
}
function validateEmail(email)
{
    var splitted = email.match("^(.+)@(.+)$");
    if(splitted == null) return false;
    if(splitted[1] != null )
    {
      var regexp_user=/^\"?[\w-_\.]*\"?$/;
      if(splitted[1].match(regexp_user) == null) return false;
    }
    if(splitted[2] != null)
    {
      var regexp_domain=/^[\w-\.]*\.[A-Za-z]{2,4}$/;
      if(splitted[2].match(regexp_domain) == null) 
      {
	    var regexp_ip =/^\[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\]$/;
	    if(splitted[2].match(regexp_ip) == null) return false;
      }// if
      return true;
    }
return false;
}

function IsCheckSelected(objValue,chkValue)
{
    var selected=false;
	var objcheck = objValue.form.elements[objValue.name];
    if(objcheck.length)
	{
		var idxchk=-1;
		for(var c=0;c < objcheck.length;c++)
		{
		   if(objcheck[c].value == chkValue)
		   {
		     idxchk=c;
			 break;
		   }//if
		}//for
		if(idxchk>= 0)
		{
		  if(objcheck[idxchk].checked=="1")
		  {
		    selected=true;
		  }
		}//if
	}
	else
	{
		if(objValue.checked == "1")
		{
			selected=true;
		}//if
	}//else	

	return selected;
}
function TestDontSelectChk(objValue,chkValue,strError)
{
	var pass = true;
	pass = IsCheckSelected(objValue,chkValue)?false:true;

	if(pass==false)
	{
     if(!strError || strError.length ==0) 
        { 
        	strError = "Can't Proceed as you selected "+objValue.name;  
        }//if			  
	  sfm_show_error_msg(strError,objValue);
	  
	}
    return pass;
}
function TestShouldSelectChk(objValue,chkValue,strError)
{
	var pass = true;

	pass = IsCheckSelected(objValue,chkValue)?true:false;

	if(pass==false)
	{
     if(!strError || strError.length ==0) 
        { 
        	strError = "You should select "+objValue.name;  
        }//if			  
	  sfm_show_error_msg(strError,objValue);
	  
	}
    return pass;
}
function TestRequiredInput(objValue,strError)
{
	
 var ret = true;
 var val = objValue.value;
 val = val.replace(/^\s+|\s+$/g,"");//trim
    if(eval(val.length) == 0) 
    { 
       if(!strError || strError.length ==0) 
       { 
         strError = objValue.name + " : Required Field"; 
       }//if 
       sfm_show_error_msg(strError,objValue); 
          ret=false; 
    }//if 
   
return ret;
}



// Added


function TestRequiredInputPassword(objValue,strError)
{
 var ret = true;
 var val = objValue.value;
 val = val.replace(/^\s+|\s+$/g,"");//trim
    if(eval(val.length) == 0) 
    { 
    	if(strError!=""){
       sfm_show_error_msg(strError,objValue);
    	}
       
       
       ret=false; 
    } 
   
return ret;
}


function TestMaxLen(objValue,strMaxLen,strError)
{
 var ret = true;
    if(eval(objValue.value.length) > eval(strMaxLen)) 
    { 
      if(!strError || strError.length ==0) 
      { 
        strError = objValue.name + " : "+ strMaxLen +" characters maximum "; 
      }//if 
      sfm_show_error_msg(strError,objValue); 
      ret = false; 
    }//if 
return ret;
}
function TestMinLen(objValue,strMinLen,strError)
{
 var ret = true;
    if(eval(objValue.value.length) <  eval(strMinLen)) 
    { 
      if(!strError || strError.length ==0) 
      { 
        strError = objValue.name + " : " + strMinLen + " characters minimum  "; 
      }//if               
      sfm_show_error_msg(strError,objValue); 
      ret = false;   
    }//if 
return ret;
}
function TestInputType(objValue,strRegExp,strError,strDefaultError)
{
   var ret = true;

    var charpos = objValue.value.search(strRegExp); 
    if(objValue.value.length > 0 &&  charpos >= 0) 
    { 
     if(!strError || strError.length ==0) 
      { 
        strError = strDefaultError;
      }//if 
      sfm_show_error_msg(strError,objValue); 
      ret = false; 
    }//if
    
 return ret;
}
function TestValidity(objValue,strRegExp,strError,strDefaultError)
{
	var ret = true;
	
if(objValue.value.length>0){

var chkValue=strRegExp.test(objValue.value);
ret=chkValue;


if(!chkValue){
	 if(!strDefaultError || strDefaultError.length ==0) 
     {
	   strError = strDefaultError;
	 
     }
	 	//alert(strError);
	  sfm_show_error_msg(strError,objValue); 
      ret = false;
	
}
	}
 return ret;
}



function TestEmail(objValue,strError)
{
var ret = true;
     if(objValue.value.length > 0 && !validateEmail(objValue.value)	 ) 
     { 
       if(!strError || strError.length ==0) 
       { 
          strError = objValue.name+": Enter a valid Email address "; 
       }//if                                               
       sfm_show_error_msg(strError,objValue); 
       ret = false; 
     }//if 
return ret;
}
function TestLessThan(objValue,strLessThan,strError)
{
var ret = true;
	  if(isNaN(objValue.value)) 
	  { 
	    sfm_show_error_msg(objValue.name +": Should be a number ",objValue); 
	    ret = false; 
	  }//if 
	  else
	  if(eval(objValue.value) >=  eval(strLessThan)) 
	  { 
	    if(!strError || strError.length ==0) 
	    { 
	      strError = objValue.name + " : value should be less than "+ strLessThan; 
	    }//if               
	    sfm_show_error_msg(strError,objValue); 
	    ret = false;                 
	   }//if   
return ret;          
}
function TestGreaterThan(objValue,strGreaterThan,strError)
{
var ret = true;
     if(isNaN(objValue.value)) 
     { 
       sfm_show_error_msg(objValue.name+": Should be a number ",objValue); 
       ret = false; 
     }//if 
	 else
     if(eval(objValue.value) <=  eval(strGreaterThan)) 
      { 
        if(!strError || strError.length ==0) 
        { 
          strError = objValue.name + " : value should be greater than "+ strGreaterThan; 
        }//if               
        sfm_show_error_msg(strError,objValue);  
        ret = false;
      }//if  
return ret;           
}
function TestRegExp(objValue,strRegExp,strError)
{
var ret = true;
    if( objValue.value.length > 0 && 
        !objValue.value.match(strRegExp) ) 
    { 
      if(!strError || strError.length ==0) 
      { 
        strError = objValue.name+": Invalid characters found "; 
      }//if                                                               
      sfm_show_error_msg(strError,objValue); 
      ret = false;                   
    }//if 
return ret;
}
function TestDontSelect(objValue,dont_sel_index,strError)
{
	var x = objValue.options[objValue.selectedIndex].value; 
	var txt = objValue.options[objValue.selectedIndex].text;

	txt = txt.toUpperCase();

var ret = true;
    if(objValue.selectedIndex == null) 
    {
      sfm_show_error_msg("ERROR: dontselect command for non-select Item"); 
      ret =  false; 
    } 
    if(x == eval(dont_sel_index) || txt == 'Select one'.toUpperCase()) 
    { 
     if(!strError || strError.length ==0) 
      { 
      strError = objValue.name+": Please Select one option "; 
      }//if                                                               
      sfm_show_error_msg(strError,objValue); 
      ret =  false;                                   
     } 
return ret;
}
function TestSelectOneRadio(objValue,strError)
{
	var objradio = objValue.form.elements[objValue.name];
	var one_selected=false;
	for(var r=0;r < objradio.length;r++)
	{
	  if(objradio[r].checked)
	  {
	  	one_selected=true;
		break;
	  }
	}
	if(false == one_selected)
	{
      if(!strError || strError.length ==0) 
       {
	    strError = "Please select one option from "+objValue.name;
	   }	
	  sfm_show_error_msg(strError,objValue);
	}
return one_selected;
}
/*
 * Auther		:	Rijisha
 * Date			:	30-09-2010
 * Description	:	Entered date can not be a past date
 */
//START Date conversion function
 function dateReverse(formDate){
 	toDate = formDate.split("/");
 	formDate="";
 	formDate = toDate[1]+"/"+toDate[0]+"/"+toDate[2];
 	
 	return 	formDate;
 } 
//END Date conversion function

function PastDateNotAllowed(objValue,strError) {
	var ret = true;
	var frmDt = new Date(dateReverse(objValue.value));
	today = new Date();
	today.setHours(00,00,00);
	yday = new Date(today - (24*60*60*1000));
	    if(frmDt < yday) { 
	       if(!strError || strError.length ==0) { 
	         strError = objValue.name + " : Entered From date is a past date"; 
	       } 
	       sfm_show_error_msg(strError,objValue); 
	          ret=false; 
	    }
	return ret;
}

function FutureDateNotAllowed(objValue,strError) {
	var ret = true;
	var formDt = new Date(dateReverse(objValue.value));
	today = new Date();
	today.setHours(00,00,00);
	    if(formDt > today) {
	       if(!strError || strError.length ==0) { 
	         strError = objValue.name + " : Entered From date is a future date"; 
	       } 
	       sfm_show_error_msg(strError,objValue); 
	          ret=false; 
	    }
	return ret;
}

function InvalidDateRange(objValue,strError) {
	var ret = true;
	toDt = objValue.value;
	if(toDt!="" && toDt!=null) {
		index = (objValue.id).substring(6);
		var frmDt = document.getElementById("fromDate"+index).value;
		var frmDt = new Date(dateReverse(frmDt));
		toDt = new Date(dateReverse(toDt));
		if(toDt < frmDt) {
			if(!strError || strError.length ==0) { 
		        strError = objValue.name + " : Entered Date range is invalid"; 
		    } 
	       sfm_show_error_msg(strError,objValue); 
	       ret=false;
		}
	}
	return ret;
}

function TestMultipleSelect(ob,cmdvalue,strError) {
	var count = 0; var ret = true;
	for (var i = 0; i < ob.options.length; i++) {
		if (ob.options[i].selected) {
			count++;
			if(ob.options[i].value == "-1") {
				ob.options[i].selected = "false";
				count--;
			}
		}
	}
	if(count==0) {
		if(!strError || strError.length ==0) { 
			strError = cmdvalue.name+": Please Select one option "; 
		}                                                               
		sfm_show_error_msg(strError,ob); 
		ret =  false; 
	}
	return ret;
}
//END DATE VALIDATIONS BY RIJISHA

function validateInput(strValidateStr,objValue,strError) 
{ 
    var ret = true;
    var epos = strValidateStr.search("="); 
    var  command  = ""; 
    var  cmdvalue = ""; 
    if(epos >= 0) 
    { 
     command  = strValidateStr.substring(0,epos); 
     cmdvalue = strValidateStr.substr(epos+1); 
    } 
    else 
    { 
     command = strValidateStr; 
    } 
    switch(command) 
    { 
    	
    
        case "req": 
        case "required": 
         { 
		   ret = TestRequiredInput(objValue,strError)
           break;             
         }//case required 
        case "maxlength": 
        case "maxlen": 
          { 
			 ret = TestMaxLen(objValue,cmdvalue,strError)
             break; 
          }//case maxlen 
        case "minlength": 
        case "minlen": 
           { 
			 ret = TestMinLen(objValue,cmdvalue,strError)
             break; 
            }//case minlen 
        case "alnum": 
        case "alphanumeric": 
           { 
				ret = TestInputType(objValue,"[^A-Za-z0-9]",strError, 
						objValue.name+": Only alpha-numeric characters allowed ");
				break; 
           }
        case "alnum_s": 
        case "alphanumeric_space": 
           { 
				ret = TestInputType(objValue,"[^A-Za-z0-9\\s]",strError, 
						objValue.name+": Only alpha-numeric characters and space allowed ");
				 if(ret){
	            	 	if(objValue.value!=null&&objValue.value!=""){
	            	 var checkString=objValue.value.replace(/[-().\/\s0123456789]/g,"");
	            		if(!(checkString.length>0)){
	                   		sfm_show_error_msg(strError,objValue);
	                    	ret = false;
	    	

	                   	}
	            	 	}
				 }
				break; 
           }
        case "CSCOffice_NameEng": 
        { 
				ret = TestInputType(objValue,"[^A-Za-z0-9\\s/()\,.]",strError, 
						objValue.name+": Only alpha-numeric characters and space allowed ");
				 if(ret){
	            	 	if(objValue.value!=null&&objValue.value!=""){
	            	 var checkString=objValue.value.replace(/[-().\/\s0123456789]/g,"");
	            		if(!(checkString.length>0)){
	                   		sfm_show_error_msg(strError,objValue);
	                    	ret = false;
	    	

	                   	}
	            	 	}
				 }
				break; 
        }	
        case "num": 
        case "numeric": 
           { 
                ret = TestInputType(objValue,"[^0-9]",strError, 
						objValue.name+": Only digits allowed ");
                break;               
           }
        case "dec": 
        case "decimal": 
           { 
                ret = TestInputType(objValue,"[^0-9\.]",strError, 
						objValue.name+": Only numbers allowed ");
                break;               
           }
        case "alphabetic": 
        case "alpha": 
           { 
                ret = TestInputType(objValue,"[^A-Za-z]",strError, 
						objValue.name+": Only alphabetic characters allowed ");
                break; 
           }
        case "alphabetic_space": 
        case "alpha_s": 
           { 
                ret = TestInputType(objValue,"[^A-Za-z\\s]",strError, 
						objValue.name+": Only alphabetic characters and space allowed ");
                break; 
                
           }
        case "email": 
          { 
			   ret = TestEmail(objValue,strError);
               break; 
          }
        case "lt": 
        case "lessthan": 
         { 
    	      ret = TestLessThan(objValue,cmdvalue,strError);
              break; 
         }
        case "gt": 
        case "greaterthan": 
         { 
			ret = TestGreaterThan(objValue,cmdvalue,strError);
            break; 
         }//case greaterthan 
        case "regexp": 
         { 
			ret = TestRegExp(objValue,cmdvalue,strError);
           break; 
         }
        case "dontselect": 
         { 
			 ret = TestDontSelect(objValue,cmdvalue,strError)
             break; 
         }
		case "dontselectchk":
		{
			ret = TestDontSelectChk(objValue,cmdvalue,strError)
			break;
		}
		case "shouldselchk":
		{
			ret = TestShouldSelectChk(objValue,cmdvalue,strError)
			break;
		}
		case "selone_radio":
		{
			ret = TestSelectOneRadio(objValue,strError);
		    break;
		}	
		case "alpha_sdot": 
        { 
              
        	ret = TestInputType(objValue,"[^A-Za-z\\s]",strError, 
						objValue.name+": Only alphabetic characters and space allowed ");
         
        if(ret){
         	ret=TestValidity(objValue,/[A-Za-z]/,strError, objValue.name+": Enter Valid Name ");
    
        
        }
                      
            break; 
        }
		case "alpha_spacedot": 
        { 
              
        	ret = TestInputType(objValue,"[^A-Za-z.\\s]",strError, 
						objValue.name+": Only alphabetic characters and space allowed ");
         
        if(ret){
         	ret=TestValidity(objValue,/[A-Za-z]/,strError, objValue.name+": Enter Valid Name ");
    
        
        }
                      
            break; 
        }
        case "house_No": 
        { 
             ret = TestInputType(objValue,"[^A-Za-z0-9\\s\/\(\)\-]",strError, 
						objValue.name+": Only alphabets,digits,space,/,-,()are allowed ");
             if(ret){
            	 if(objValue.value!=null&&objValue.value!=""){
            	 var checkString=objValue.value.replace(/[-().\/\s]/g,"");
            		if(!(checkString.length>0)){
                   		sfm_show_error_msg(strError,objValue);
                    	ret = false;
    	
                   	}
            	 }
             }
             break; 
        }
        
        case "driving_licence":
        {
        	if(objValue.value!=null&&objValue.value!=""){
        	 ret = TestInputType(objValue,"[^0-9\/]",strError, 
						objValue.name+": Only digits and / are allowed ");	
        	
        	if(ret){
        		var checkString=objValue.value.split("/");
        		if(checkString.length!=3){
        			sfm_show_error_msg(strError,objValue);
        			ret=false;
        		}else{
        		
        		if(checkString[2].length!=4){
        			sfm_show_error_msg(strError,objValue);
        			ret=false;
        		}
        		
        		if(!(parseInt(checkString[2])>parseInt(1900)&&parseInt(checkString[2])<parseInt(3000))){
        			sfm_show_error_msg(strError,objValue);
        			ret=false;
        			
        			
        		}
        		}
        	
        	}
        	
        	}
        break;	
        }
		case "house_NoMal": 
        { 
        	 ret = true;
        	 if(objValue.value.match("[#^;!£$%&*}{@~`?\n<>+_=,'|.:\"\\[\\]\\\\]+")) 
        	 {
             	sfm_show_error_msg(strError,objValue);
             	ret = false;
             }			
        	 
             if(ret){
            	 if(objValue.value!=null&&objValue.value!=""){
            	 var checkString=objValue.value.replace(/[-().\/\s]/g,"");
            		if(!(checkString.length>0)){
                   		sfm_show_error_msg(strError,objValue);
                    	ret = false;
    	
                   	}
            	 }
             }
             break; 
        }
		case "house_NameMal": 
        { 
        
        	ret = true;
            if(objValue.value.match("[-#;!£$%^&*}{@~`?\n<>/+_(=),'|:\"\\[\\]\\\\]+"))
            {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
            }
            
            
            if(ret){
            	if(objValue.value!=null&&objValue.value!=""){
            //	ret=TestValidity(objValue,/[A-Za-z0-9]/,strError, objValue.name+": Enter Valid House Name ");
               	var checkString=objValue.value.replace(/[.\s0123456789]/g,"");
               	if(!(checkString.length>0)){
               		sfm_show_error_msg(strError,objValue);
                	ret = false;
	
               	}
            	}
            }
            
             break; 
        }
		case "locality_Name": 
        { 
             ret = TestInputType(objValue,"[^A-Za-z0-9\\s]",strError, 
						objValue.name+": Only alphabets,digits,space,/,-,()are allowed ");
             
             if(ret){
            	 if(objValue.value!=null&&objValue.value!=""){
            	 var checkString=objValue.value.replace(/[-().\/\s0123456789]/g,"");
            		if(!(checkString.length>0)){
                   		sfm_show_error_msg(strError,objValue);
                    	ret = false;
    	
                   	}
            	 }
             }
             
             break; 
        }
		case "locality_NameMal": 
        { 
        	 ret = true;
        	 if(objValue.value.match("[-#;!£$%^&*}{@~`?\n<>/+_(=),'|.:\"\\[\\]\\\\]+")) 
        	 {
             	sfm_show_error_msg(strError,objValue);
             	ret = false;
             }	
             if(ret){
            	 	if(objValue.value!=null&&objValue.value!=""){
            	 var checkString=objValue.value.replace(/[-().\/\s0123456789]/g,"");
            		if(!(checkString.length>0)){
                   		sfm_show_error_msg(strError,objValue);
                    	ret = false;
    	
                   	}
            	 	}
            	 
             } 
        	 
             break; 
        }
		case "CSCOffice_NameMal": 
        { 
        	 ret = true;
        	
        	 
        	 if(objValue.value.match("[-#;!£$%^&*}{@~`?\n<>+_='|:\"\\[\\]\\\\]+")) 
        	 {
             	sfm_show_error_msg(strError,objValue);
             	ret = false;
             }	
             if(ret){
            	 	if(objValue.value!=null&&objValue.value!=""){
            	 var checkString=objValue.value.replace(/[-(),.\/\s0123456789]/g,"");
            		if(!(checkString.length>0)){
                   		sfm_show_error_msg(strError,objValue);
                    	ret = false;
    	

                   	}
            	 	}
            	 
             } 
        	 
             break; 
        }
		case "name_mal": 
        { 
        	ret = true;
       	 if(objValue.value.match("[-#;!£$%^&*}{@~`?\n<>/+_(=),'|:\"\\[\\]\\\\]+")||objValue.value.match("[0-9.]+")) 
       	 {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
            }		
       	 if(ret){
    	if(objValue.value!=null&&objValue.value!=""){
    		
    		//var checkString=objValue.value.replace(/[.\s]/g,"");
    		var checkString=objValue.value.replace(/[.\s]/g,"");
           	if(!(checkString.length>0)){
           		sfm_show_error_msg(strError,objValue);
           		ret=false;
         	}	
           	
    	}	
        }
       	 
            break; 
        }
		case "purposeName_mal": 
        { 
        	ret = true;
       	 if(objValue.value.match("[-#;!£$%^&*}{@~`?\n<>/+_(=),'.|:\"\\[\\]\\\\]+")||objValue.value.match("[0-9]+")) 
       	 {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
          }			
            break; 
        }
		case "nopastdate": 
        { 
        	ret = PastDateNotAllowed(objValue,strError);
             break; 
        }
		case "nofuturedate": 
        { 
        	ret = FutureDateNotAllowed(objValue,strError);
             break; 
        }
		case "invalidDateRange": 
        { 
        	ret = InvalidDateRange(objValue,strError);
             break; 
        }
		case "state_name": 
        { 
        	ret = true;
       	 if(objValue.value.match("[-#;!£$%^*}{@~`?\n<>/+_(=),.'|:\"\\[\\]\\\\]+")||objValue.value.match("[0-9]+")) 
       	 {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
            }			
            break; 
        }
		case "jurisdiction_name": 
        { 
             ret = TestInputType(objValue,"[^A-Za-z\\s\\(\\)]",strError, 
						objValue.name+": Only alphabets,space,(,)are allowed ");
             break; 
        }
		case "mastername_eng": 
        { 
        	ret = true;
       	 if(objValue.value.match("[-#;!£$&%^*}{@~`?\n<>/+_(=),'.|:\"\\[\\]\\\\]+")||objValue.value.match("[0-9]+")) 
       	 {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
            }			
            break; 
        }
		case "dptname": 
        { 
        	ret = true;
       	 if(objValue.value.match("[#;!£$%^*}{@~`?\n<>/+_(=),'.|:\"\\[\\]\\\\]+")||objValue.value.match("[0-9]+")) 
       	 {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
            }			
            break; 
        }
		case "ws_url": 
        { 
        	ret = true;
       	 if(objValue.value.match("[#;!£$%^*}{@~`\n<>+_(=),'|\\s\"\\[\\]\\\\]+")) 
       	 {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
            }			
            break; 
        }
		case "db_name": 
        { 
        	ret = true;
       	 if(objValue.value.match("[#;&!£$%^*}{@~`:.?/\n<>+(=),'|\\s\"\\[\\]\\\\]+")||objValue.value.match("[0-9]+")) 
       	 {
            	sfm_show_error_msg(strError,objValue);
            	ret = false;
            }			
            break; 
        }
		case "password": 
		{
			ret=false;
			sfm_show_error_msg(strError,objValue);
			 if(objValue.value.match("[-#;!£$&%^*}{@~`?\n<>/+_(=),'.|:\"]+")&& objValue.value.match("[A-Za-z]+")&&objValue.value.match("[0-9]+")&& !objValue.value.match("[\\s]+")) 
	       	 {
	            	ret = true;
	            }	
			  break;
			
		}
		case "multipleSelect": {
			ret = TestMultipleSelect(objValue,cmdvalue,strError);
            break;
		}
               
		   case "reqPassword": 
	         { 
			   ret = TestRequiredInputPassword(objValue,strError);
	           break;             
	         }
		   case "uid": 
	          { 
				   ret = TestUid(objValue,strError);
	               break; 
	          }
		   case "malayalam": 
	         { //ZERO WIDTH JOINER etc wwwdotfileformatdotinfoslashinfoslahunicodeslashcharslashz.htm
			   ret = TestInputType(objValue,"[^\u0D00-\u0D7F\u200B\u200C\u200D\uFEFF\u24EA\u3007\u2070\\s]",strError, 
						objValue.name+": Only malayalam characters and space allowed ");
               break; 
	         }
    }//switch 
	return ret;
}
function VWZ_IsListItemSelected(listname,value)
{
 for(var i=0;i < listname.options.length;i++)
 {
  if(listname.options[i].selected == true &&
   listname.options[i].value == value) 
   {
     return true;
   }
 }
 return false;
}
function VWZ_IsChecked(objcheck,value)
{
 if(objcheck.length)
 {
     for(var c=0;c < objcheck.length;c++)
     {
       if(objcheck[c].checked == "1" && 
	     objcheck[c].value == value)
       {
        return true; 
       }
     }
 }
 else
 {
  if(objcheck.checked == "1" )
   {
    return true; 
   }    
 }
 return false;
}
function trim(stringToTrim) {
	return stringToTrim.replace(/^\s+|\s+$/g,"");
}
function ltrim(stringToTrim) {
	return stringToTrim.replace(/^\s+/,"");
}
function rtrim(stringToTrim) {
	return stringToTrim.replace(/\s+$/,"");
}


function echeck(str)
{

/*		var at="@"
		var dot="."
		var lat=str.indexOf(at)
		var lstr=str.length
		var ldot=str.indexOf(dot)
		if (str.indexOf(at)==-1){
		   
		   return false
		}

		if (str.indexOf(at)==-1 || str.indexOf(at)==0 || str.indexOf(at)==lstr){
		   return false
		}

		if (str.indexOf(dot)==-1 || str.indexOf(dot)==0 || str.indexOf(dot)==lstr){
		    return false
		}

		 if (str.indexOf(at,(lat+1))!=-1){
		    return false
		 }

		 if (str.substring(lat-1,lat)==dot || str.substring(lat+1,lat+2)==dot){
		    return false
		 }

		 if (str.indexOf(dot,(lat+2))==-1){
		    return false
		 }
		
		 if (str.indexOf(" ")!=-1){
		    return false
		 }

 		 return true		*/		
	
 	   var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/; 
 	  if(!str.match(emailPattern))
 	  {
 		  return false;
 	  }
 	 return true;
	}



var digits = "0123456789";
var phoneNumberDelimiters = "()- ";
var validWorldPhoneChars = phoneNumberDelimiters + "+";
var minDigitsInIPhoneNumber = 10;

function isInteger(s)
{   var i;
    for (i = 0; i < s.length; i++)
    {   
        var c = s.charAt(i);
        if (((c < "0") || (c > "9"))) return false;
    }
    return true;
}
function trimPhone(s)
{   var i;
    var returnString = "";
    for (i = 0; i < s.length; i++)
    {   
        var c = s.charAt(i);
        if (c != " ") returnString += c;
    }
    return returnString;
}
function stripCharsInBag(s, bag)
{   var i;
    var returnString = "";
    for (i = 0; i < s.length; i++)
    {   
        var c = s.charAt(i);
        if (bag.indexOf(c) == -1) returnString += c;
    }
    return returnString;
}

function checkInternationalPhone(strPhone){
var bracket=3;
strPhone=trimPhone(strPhone);
if(strPhone.indexOf("+")>1) return false;
if(strPhone.indexOf("-")!=-1)bracket=bracket+1;
if(strPhone.indexOf("(")!=-1 && strPhone.indexOf("(")>bracket)return false;
var brchr=strPhone.indexOf("(");
if(strPhone.indexOf("(")!=-1 && strPhone.charAt(brchr+2)!=")")return false;
if(strPhone.indexOf("(")==-1 && strPhone.indexOf(")")!=-1)return false;
s=stripCharsInBag(strPhone,validWorldPhoneChars);
return (isInteger(s) && s.length >= minDigitsInIPhoneNumber);
}

function isRtiFuturedate(field)
{
	
var exDateTime=field;
	

		var mon = exDateTime.substring(3,5);
		var day= exDateTime.substring(0,2);
		if(mon == '08')
		mon = '8';
		if(mon == '09')
		mon = '9';
		if(day == '09')
		day = '9';
		if(day == '08')
		day = '8';
		day = parseInt(day);
		 mon = parseInt(mon);
		var strYear=parseInt(exDateTime.substring(6));
		today = new Date();
		var thisMon = today.getMonth();
		thisMon = thisMon+1;
		var thisDay = today.getDate();
		var thisYear = today.getFullYear();

		if(thisYear < strYear)
		{
			return false;
			
		}
		else if((thisYear == strYear) && (thisMon < mon))
		{
			return false;
		}
		else if((thisYear == strYear) && (thisMon == mon) && (thisDay < day))
		{
			return false;
		}
		else
		{
			return true;
		}
		
}
function TestUid(objValue,strError)
{
var ret = true;
     if(objValue.value.length > 0 && (!objValue.value.verhoeffCheck())	 ) 
     { 
       sfm_show_error_msg(strError,objValue); 
       ret = false; 
     }
return ret;
}
function TestNameMalayalam(objValue,strError)
{
var ret = true;
     if(objValue.value.length > 0 && !validateNameMalayalam(objValue.value)	 ) 
     { 
       if(!strError || strError.length ==0) 
       { 
          strError = objValue.name+": Enter a valid Malayalam Name "; 
       }//if                                               
       sfm_show_error_msg(strError,objValue); 
       ret = false; 
     }//if 
return ret;
}
function validateNameMalayalam(nameMal)
{
	if((!nameMal.match("[^\u0D00-\u0D7F]")))
	{
		 return false;
	}
return true;
}
function checkIFSCCode(value ,id)
{
	
		
	if(value.length>12 || value.length<11){
		alert("ശരിയായ IFSC കോഡ് നല്കുക");
		document.getElementById(id).value ="";
		document.getElementById(id).focus();
		}
	
	
	var code, i, len;

	  for (i = 0, len = value.length; i < len; i++) {
	    code = value.charCodeAt(i);
	    if (!(code > 47 && code < 58) && // numeric (0-9)
	        !(code > 64 && code < 91) && // upper alpha (A-Z)
	        !(code > 96 && code < 123)) { // lower alpha (a-z)
	    	alert("ശരിയായ IFSC കോഡ് നല്കുക");
        	document.getElementById(id).value ="";
			document.getElementById(id).focus();
			break;
	    }
	  }
	  
}

/*
	Copyright (C) 2003-2009 JavaScript-Coder.com . All rights reserved.
*/